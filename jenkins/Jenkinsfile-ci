pipeline {
    agent any

    options {
        skipDefaultCheckout(true)
    }

    environment {
        PROJECT_NAME = 'spring-petclinic'
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-cred')
        DOCKERHUB_USER = "thainhat104"
        REGISTRY = "docker.io"
        REPO = "spring-petclinic"
    }

    stages {
        stage('Check SCM') {
            steps {
                cleanWs()
                checkout scm
                script {
                    def gitCommitHash = sh(script: "git rev-parse --short=8 HEAD", returnStdout: true).trim()
                    env.COMMIT_HASH = gitCommitHash
                }
            }
        }

        stage('Check Changed Files') {
            steps {
                script {
                    def branch_name = ""

                    if (env.CHANGE_ID) {
                        branch_name = "${env.CHANGE_TARGET}"
                        sh("git fetch origin ${branch_name}:${branch_name} --no-tags")
                    } else {
                        branch_name = 'HEAD~1'
                    }

                    def changedFiles = sh(script: "git diff --name-only ${branch_name}", returnStdout: true).trim()
                    echo "${changedFiles}"

                    def folderList = [
                        'spring-petclinic-admin-server',
                        'spring-petclinic-api-gateway', 
                        'spring-petclinic-customers-service',
                        'spring-petclinic-discovery-server',
                        'spring-petclinic-vets-service',
                        'spring-petclinic-visits-service',
                        'spring-petclinic-genai-service'
                    ]
                    
                    def changedFolders = changedFiles.split('\n')
                        .collect { it.split('/')[0] }
                        .unique()
                        .findAll { folderList.contains(it) }
                    
                    echo "Changed Folders: \n${changedFolders.join('\n')}"
                    
                    env.CHANGED_MODULES = changedFolders.join(',')
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    def modules = env.CHANGED_MODULES ? env.CHANGED_MODULES.split(',') : []
                    def imageTag = env.COMMIT_HASH
                    def gitTag = sh(script: "git describe --tags --exact-match || true", returnStdout: true).trim()
                    sh "git fetch origin main --no-tags"

                    def currentHash = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
                    def mainHash = sh(script: "git rev-parse origin/main", returnStdout: true).trim()
                    def isMainBranch = currentHash == mainHash

                    echo "${gitTag}, ${isMainBranch}"

                    if (gitTag != "" && isMainBranch) {
                        imageTag = gitTag
                    } else if (gitTag == "" && isMainBranch) {
                        imageTag = "latest"
                    }

                    env.IMAGE_TAG = imageTag

                    def serviceConfig = [
                        'spring-petclinic-admin-server': [name: 'admin-server', port: 9090],
                        'spring-petclinic-api-gateway': [name: 'api-gateway', port: 8080],
                        'spring-petclinic-customers-service': [name: 'customers-service', port: 8081],
                        'spring-petclinic-discovery-server': [name: 'discovery-server', port: 8761],
                        'spring-petclinic-vets-service': [name: 'vets-service', port: 8083],
                        'spring-petclinic-visits-service': [name: 'visits-service', port: 8082],
                        'spring-petclinic-genai-service': [name: 'genai-service', port: 8084]
                    ]

                    if (modules.size() > 0) {
                        for (module in modules) {
                            def serviceInfo = serviceConfig[module]
                            if (serviceInfo) {
                                echo "Run unit test for: ${module}"
                                sh "mvn test -pl ${module}"

                                echo "Building ${module}"
                                sh "./mvnw clean package -DskipTests -pl ${module} -am"

                                def jarFile = findFiles(glob: "${module}/target/*.jar")[0].path
                                sh "cp ${jarFile} docker/${serviceInfo.name}.jar"

                                sh """
                                    docker build -t ${DOCKERHUB_USER}/${PROJECT_NAME}-${serviceInfo.name}:${imageTag} \
                                        --build-arg ARTIFACT_NAME=${serviceInfo.name} \
                                        --build-arg EXPOSED_PORT=${serviceInfo.port} \
                                        -f ./docker/Dockerfile ./docker
                                """

                                sh "rm docker/${serviceInfo.name}.jar"
                            }
                        }
                    }
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    def modules = env.CHANGED_MODULES ? env.CHANGED_MODULES.split(',') : []

                    def serviceConfig = [
                        'spring-petclinic-admin-server': [name: 'admin-server', port: 9090],
                        'spring-petclinic-api-gateway': [name: 'api-gateway', port: 8080],
                        'spring-petclinic-customers-service': [name: 'customers-service', port: 8081],
                        'spring-petclinic-discovery-server': [name: 'discovery-server', port: 8761],
                        'spring-petclinic-vets-service': [name: 'vets-service', port: 8083],
                        'spring-petclinic-visits-service': [name: 'visits-service', port: 8082],
                        'spring-petclinic-genai-service': [name: 'genai-service', port: 8084]
                    ]

                    if (modules.size() > 0) {
                        withCredentials([usernamePassword(credentialsId: 'dockerhub-cred', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                            sh "docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}"

                            for (module in modules) {
                                def serviceInfo = serviceConfig[module]
                                if (serviceInfo) {
                                    def imageName = "${DOCKERHUB_USER}/${PROJECT_NAME}-${serviceInfo.name}:${env.IMAGE_TAG}"
                                    echo "Pushing Docker image: ${imageName}"
                                    sh "docker push ${imageName}"
                                }
                            }
                        }
                    } else {
                        echo "No changed modules; skipping Docker push."
                    }
                }
            }
        }

        stage('Update Helm Chart for new Tags') {
            when {
                expression {
                    return sh(script: "git describe --tags --exact-match || true", returnStdout: true).trim() != ""
                }
            }
            steps {
                script {
                    def isMainBranch = sh(script: "git branch -r --contains HEAD | grep 'origin/main' || true", returnStdout: true).trim() != ""
                    if (!isMainBranch) {
                        echo "Tag '${env.IMAGE_TAG}' is not on 'main' branch. Skipping Helm update."
                        return
                    }

                    def modules = env.CHANGED_MODULES ? env.CHANGED_MODULES.split(',') : []
                    if (modules.size() > 0) {
                        echo "Triggering Helm chart update for new tag '${env.IMAGE_TAG}' and changed modules: ${modules.join(', ')}"

                        def helmParams = [
                            string(name: 'ADMIN_SERVER_TAG', value: modules.contains('spring-petclinic-admin-server') ? env.IMAGE_TAG : 'latest'),
                            string(name: 'API_GATEWAY_TAG', value: modules.contains('spring-petclinic-api-gateway') ? env.IMAGE_TAG : 'latest'),
                            string(name: 'CUSTOMERS_SERVICE_TAG', value: modules.contains('spring-petclinic-customers-service') ? env.IMAGE_TAG : 'latest'),
                            string(name: 'DISCOVERY_SERVER_TAG', value: modules.contains('spring-petclinic-discovery-server') ? env.IMAGE_TAG : 'latest'),
                            string(name: 'VETS_SERVICE_TAG', value: modules.contains('spring-petclinic-vets-service') ? env.IMAGE_TAG : 'latest'),
                            string(name: 'VISITS_SERVICE_TAG', value: modules.contains('spring-petclinic-visits-service') ? env.IMAGE_TAG : 'latest'),
                            string(name: 'GENAI_SERVICE_TAG', value: modules.contains('spring-petclinic-genai-service') ? env.IMAGE_TAG : 'latest')
                        ]

                        build job: 'update_helm_chart_staging',
                        wait: false,
                        parameters: helmParams
                    } else {
                        echo "No changed modules for tag '${env.IMAGE_TAG}'. Skipping deployment."
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Logging out of Docker Hub'
            sh 'docker logout || true'

            echo 'Cleaning up all Docker imagesâ€¦'
            sh 'docker system prune -f || true'

            echo 'Clean Workspace'
            cleanWs()
        }
    }
}
