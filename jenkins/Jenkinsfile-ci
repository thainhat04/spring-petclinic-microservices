pipeline {
    agent any

    parameters {
        string(name: 'BRANCH_TO_BUILD', defaultValue: 'main', description: 'Branch cần build')
    }

    environment {
        PROJECT_NAME = 'spring-petclinic'
        DOCKER_IMAGE_NAME = "thainhat104/${PROJECT_NAME}"
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-cred')
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: "${params.BRANCH_TO_BUILD}",
                    url: 'https://github.com/thainhat04/spring-petclinic-microservices.git',
                    credentialsId: 'github-cred'
            }
        }

        stage('Get Commit ID') {
            steps {
                script {
                    env.COMMIT_ID = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                }
            }
        }

        stage('Detect Changed Services') {
            steps {
                script {
                    def services = [
                        [name: 'admin-server', port: 9090],
                        [name: 'api-gateway', port: 8080],
                        [name: 'customers-service', port: 8081],
                        [name: 'discovery-server', port: 8761],
                        [name: 'vets-service', port: 8083],
                        [name: 'visits-service', port: 8082],
                        [name: 'genai-service', port: 8084]
                    ]

                    def changedServices = []

                    for (service in services) {
                        def serviceDir = "${PROJECT_NAME}-${service.name}"
                        def isChanged = sh(
                            script: "git diff --name-only HEAD^ HEAD | grep -q '^${serviceDir}/'",
                            returnStatus: true
                        ) == 0

                        if (isChanged) {
                            changedServices << service
                        }
                    }

                    if (changedServices.isEmpty()) {
                        echo '✅ Không có service nào thay đổi. Bỏ qua build & Docker.'
                    } else {
                        writeFile file: 'changed-services.txt', text: changedServices*.name.join('\n')
                        writeJSON file: 'changed-services-meta.json', json: changedServices
                    }
                }
            }
        }

        stage('Build Changed Services') {
            when {
                expression { fileExists('changed-services.txt') }
            }
            steps {
                script {
                    def changedServices = readFile('changed-services.txt').split('\n').findAll { it }
                    def modules = changedServices.collect { "${PROJECT_NAME}-${it}" }.join(',')

                    echo "📦 Building modules: ${modules}"
                    sh "./mvnw clean install -DskipTests -pl ${modules} -am"
                }
            }
        }

        stage('Build Docker Images') {
            when {
                expression { fileExists('changed-services-meta.json') }
            }
            steps {
                script {
                    def services = readJSON file: 'changed-services-meta.json'

                    for (service in services) {
                        def serviceName = service.name
                        def servicePort = service.port
                        def jarFile = findFiles(glob: "${PROJECT_NAME}-${serviceName}/target/*.jar")[0].path

                        sh "cp ${jarFile} docker/${serviceName}.jar"

                        sh """
                            docker build -t ${DOCKER_IMAGE_NAME}-${serviceName}:${COMMIT_ID} \
                                --build-arg ARTIFACT_NAME=${serviceName} \
                                --build-arg EXPOSED_PORT=${servicePort} \
                                -f ./docker/Dockerfile ./docker

                            docker tag ${DOCKER_IMAGE_NAME}-${serviceName}:${COMMIT_ID} ${DOCKER_IMAGE_NAME}-${serviceName}:latest
                        """

                        sh "rm docker/${serviceName}.jar"
                    }
                }
            }
        }

        stage('Docker Push') {
            when {
                expression { fileExists('changed-services.txt') }
            }
            steps {
                script {
                    def changedServices = readFile('changed-services.txt').split('\n').findAll { it }

                    sh "docker login -u ${DOCKERHUB_CREDENTIALS_USR} -p ${DOCKERHUB_CREDENTIALS_PSW}"
                    for (service in changedServices) {
                        sh """
                            docker push ${DOCKER_IMAGE_NAME}-${service}:${COMMIT_ID}
                            docker push ${DOCKER_IMAGE_NAME}-${service}:latest
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            sh 'docker logout || true'
            sh 'docker system prune -f || true'
        }
    }
}
