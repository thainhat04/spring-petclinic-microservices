pipeline {
    agent any

    parameters {
        string(name: 'BRANCH_TO_BUILD', defaultValue: 'main', description: 'Branch c·∫ßn build')
    }

    environment {
        PROJECT_NAME = 'spring-petclinic'
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-cred')
        DOCKERHUB_USER = "thainhat104"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: "${params.BRANCH_TO_BUILD}",
                    url: 'https://github.com/thainhat04/spring-petclinic-microservices.git',
                    credentialsId: 'github-cred'
            }
        }

        stage('Get Commit ID') {
            steps {
                script {
                    env.COMMIT_ID = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                }
            }
        }

        stage('Build Changed Services') {
            steps {
                script {
                    def services = [
                        [name: 'admin-server', port: 9090],
                        [name: 'api-gateway', port: 8080],
                        [name: 'customers-service', port: 8081],
                        [name: 'discovery-server', port: 8761],
                        [name: 'vets-service', port: 8083],
                        [name: 'visits-service', port: 8082],
                        [name: 'genai-service', port: 8084]
                    ]

                    def changedFilesRaw = sh(
                        script: """
                            git rev-parse HEAD~1 >/dev/null 2>&1 && git diff --name-only HEAD~1 HEAD || git diff --name-only HEAD
                        """,
                        returnStdout: true
                    ).trim()

                    def changedFiles = changedFilesRaw.split("\n") as List

                    def builtServices = []

                    for (service in services) {
                        def modulePath = "${PROJECT_NAME}-${service.name}"
                        def isChanged = changedFiles.any { it.startsWith("${modulePath}/") }

                        if (!isChanged) {
                            echo "‚è≠ Skip ${service.name}, not changed."
                            continue
                        }

                        echo "üî® Building ${modulePath}"
                        sh "./mvnw clean package -DskipTests -pl ${modulePath} -am"

                        def jarFile = findFiles(glob: "${modulePath}/target/*.jar")[0].path
                        sh "cp ${jarFile} docker/${service.name}.jar"

                        def imageTag = (params.BRANCH_TO_BUILD == 'main') ? 'latest' : env.COMMIT_ID

                        sh """
                            docker build -t ${DOCKERHUB_USER}/${PROJECT_NAME}-${service.name}:${imageTag} \
                                --build-arg ARTIFACT_NAME=${service.name} \
                                --build-arg EXPOSED_PORT=${service.port} \
                                -f ./docker/Dockerfile ./docker
                        """

                        sh "rm docker/${service.name}.jar"

                        builtServices << service.name
                    }

                    // L∆∞u danh s√°ch service ƒë√£ build ƒë·ªÉ push sau
                    env.BUILT_SERVICES = builtServices.join(',')
                }
            }
        }

        stage('Docker Push') {
            when {
                expression { env.BUILT_SERVICES?.trim() }
            }
            steps {
                script {
                    def services = env.BUILT_SERVICES.split(',')
                    def imageTag = (params.BRANCH_TO_BUILD == 'main') ? 'latest' : env.COMMIT_ID

                    sh "docker login -u ${DOCKERHUB_CREDENTIALS_USR} -p ${DOCKERHUB_CREDENTIALS_PSW}"

                    for (service in services) {
                        sh "docker push ${DOCKERHUB_USER}/${PROJECT_NAME}-${service}:${imageTag}"
                    }
                }
            }
        }
    }

    post {
        always {
            sh 'docker logout || true'
            sh 'docker system prune -f || true'
        }
    }
}
