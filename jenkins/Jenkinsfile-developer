pipeline {
    agent any

    parameters {
        string(name: 'CONFIG_BRANCH', defaultValue: 'main')
        string(name: 'ADMIN_BRANCH', defaultValue: 'main')
        string(name: 'API_BRANCH', defaultValue: 'main')
        string(name: 'CUSTOMERS_BRANCH', defaultValue: 'main')
        string(name: 'DISCOVERY_BRANCH', defaultValue: 'main')
        string(name: 'VETS_BRANCH', defaultValue: 'main') 
        string(name: 'VISITS_BRANCH', defaultValue: 'main')
        string(name: 'GENAI_BRANCH', defaultValue: 'main')
    }

    environment {
        IMAGE_REPO = 'thainhat104/spring-petclinic'
        GIT_REPO = 'https://github.com/thainhat04/spring-petclinic-microservices.git'
        NAMESPACE = 'petclinic-dev'
    }

    stages {
        stage('Clean and Checkout') {
            steps {
                cleanWs() // <-- Xóa toàn bộ workspace trước khi checkout
                sh 'rm -rf .git'
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[url: "${GIT_REPO}"]],
                    extensions: []
                ])
            }
        }

        stage('Deploy services to dev namespace') {
            steps {
                script {
                    def services = [
                        [name: 'config-server',    branch: params.CONFIG_BRANCH,    port: 8888],
                        [name: 'admin-server',    branch: params.ADMIN_BRANCH,    port: 9090],
                        [name: 'api-gateway',     branch: params.API_BRANCH,      port: 8080],
                        [name: 'customers-service', branch: params.CUSTOMERS_BRANCH, port: 8081],
                        [name: 'discovery-server', branch: params.DISCOVERY_BRANCH, port: 8761],
                        [name: 'vets-service',     branch: params.VETS_BRANCH,     port: 8083],
                        [name: 'visits-service',   branch: params.VISITS_BRANCH,   port: 8082],
                        [name: 'genai-service',    branch: params.GENAI_BRANCH,    port: 8084]
                    ]

                    for (service in services) {
                        def tag = 'latest'
                        if (service.branch != 'main') {
                            tag = sh(
                                script: "git ls-remote ${GIT_REPO} refs/heads/${service.branch} | cut -c1-7",
                                returnStdout: true
                            ).trim()
                        }
                        
                        // def tag = service.branch == 'main' ? 'latest' : service.branch
                        def yaml = """
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${service.name}
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${service.name}
  template:
    metadata:
      labels:
        app: ${service.name}
    spec:
      containers:
        - name: ${service.name}
          image: ${IMAGE_REPO}-${service.name}:${tag}
          ports:
            - containerPort: ${service.port}
          env:
            - name: EUREKA_INSTANCE_PREFERIPADDRESS
              value: "true"
            - name: SPRING_PROFILES_ACTIVE
              value: docker
---
apiVersion: v1
kind: Service
metadata:
  name: ${service.name}
  namespace: ${NAMESPACE}
spec:
  selector:
    app: ${service.name}
  type: NodePort
  ports:
    - port: ${service.port}
      targetPort: ${service.port}
      nodePort: ${30000 + (service.port % 1000)}
"""
                        writeFile file: "${service.name}.yaml", text: yaml
                        withEnv(["KUBECONFIG=/var/lib/jenkins/.kube/config"]) {
                          sh "kubectl apply -f ${service.name}.yaml"

                          def nodePort = 30000 + (service.port % 1000)
                          def ip =  sh(script: "kubectl get node -o jsonpath='{.items[0].status.addresses[?(@.type==\"InternalIP\")].address}'", returnStdout: true).trim()

                          echo "${service.name} is available at: http://${ip}:${nodePort}"
                        }
                    }
                }
            }
        }
    }
}
